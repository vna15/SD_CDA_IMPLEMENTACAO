
TesteDisplayI2C.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000000  00800100  00800100  00000334  2**0
                  ALLOC, LOAD, DATA
  1 .text         00000080  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .comment      0000002f  00000000  00000000  00000334  2**0
                  CONTENTS, READONLY
  3 .debug_aranges 00000060  00000000  00000000  00000363  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00000c27  00000000  00000000  000003c3  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 000006df  00000000  00000000  00000fea  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   000004d3  00000000  00000000  000016c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  000000a4  00000000  00000000  00001b9c  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    00000208  00000000  00000000  00001c40  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    000001d6  00000000  00000000  00001e48  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000050  00000000  00000000  0000201e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .text         00000004  000002dc  000002dc  00000330  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 12 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00002070  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .text.ConfigTWI 0000001c  00000282  00000282  000002d6  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 14 .text.Start   00000010  000002cc  000002cc  00000320  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 15 .text.AddrEscravo 00000014  000002b8  000002b8  0000030c  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 16 .text.EnableLCD 00000056  0000018a  0000018a  000001de  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 17 .text.carregaMSG 00000036  00000226  00000226  0000027a  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 18 .text.Stop    0000001a  0000029e  0000029e  000002f2  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 19 .text.EscreveTraco 00000046  000001e0  000001e0  00000234  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 20 .text.ConfigLCD 0000010a  00000080  00000080  000000d4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 21 .text.main    00000026  0000025c  0000025c  000002b0  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
   4:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
   8:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
   c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  10:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  14:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  18:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  1c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  20:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  24:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  28:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  2c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  30:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  34:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  38:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  3c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  40:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  44:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  48:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  4c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  50:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  54:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  58:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  5c:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  60:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>
  64:	0c 94 6e 01 	jmp	0x2dc	; 0x2dc <__bad_interrupt>

00000068 <__ctors_end>:
  68:	11 24       	eor	r1, r1
  6a:	1f be       	out	0x3f, r1	; 63
  6c:	cf ef       	ldi	r28, 0xFF	; 255
  6e:	d8 e0       	ldi	r29, 0x08	; 8
  70:	de bf       	out	0x3e, r29	; 62
  72:	cd bf       	out	0x3d, r28	; 61
  74:	0e 94 2e 01 	call	0x25c	; 0x25c <main>
  78:	0c 94 3e 00 	jmp	0x7c	; 0x7c <_exit>

0000007c <_exit>:
  7c:	f8 94       	cli

0000007e <__stop_program>:
  7e:	ff cf       	rjmp	.-2      	; 0x7e <__stop_program>

Disassembly of section .text:

000002dc <__bad_interrupt>:
 2dc:	0c 94 00 00 	jmp	0	; 0x0 <__TEXT_REGION_ORIGIN__>

Disassembly of section .text.ConfigTWI:

00000282 <ConfigTWI>:
	}
}

void ConfigTWI(){
	//Configuração do módulo TWI
	DDRC = (1 << 4) | (1 << 5);
 282:	80 e3       	ldi	r24, 0x30	; 48
 284:	87 b9       	out	0x07, r24	; 7
	TWSR |= 0b00000001; //Prescaler = 4
 286:	e9 eb       	ldi	r30, 0xB9	; 185
 288:	f0 e0       	ldi	r31, 0x00	; 0
 28a:	80 81       	ld	r24, Z
 28c:	81 60       	ori	r24, 0x01	; 1
 28e:	80 83       	st	Z, r24
	//Fator de divisão para geração de 100khz
	TWBR= 18;
 290:	82 e1       	ldi	r24, 0x12	; 18
 292:	80 93 b8 00 	sts	0x00B8, r24	; 0x8000b8 <__TEXT_REGION_LENGTH__+0x7f80b8>
	TWCR= 0b00000100; //Habilita o módulo TWI (TWEN = 1)
 296:	84 e0       	ldi	r24, 0x04	; 4
 298:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 29c:	08 95       	ret

Disassembly of section .text.Start:

000002cc <Start>:
	//------------------------------------------------------
}

void Start(){
	//Envia a condição de START
	TWCR = ((1<<TWINT) | (1<<TWSTA) | (1<<TWEN));
 2cc:	84 ea       	ldi	r24, 0xA4	; 164
 2ce:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1<<TWINT)));
 2d2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2d6:	88 23       	and	r24, r24
 2d8:	e4 f7       	brge	.-8      	; 0x2d2 <Start+0x6>
}
 2da:	08 95       	ret

Disassembly of section .text.AddrEscravo:

000002b8 <AddrEscravo>:

void AddrEscravo(int Addr){
	//Envia o endereço e o bit de R/W
	TWDR = Addr ; //0b0100 000 0
 2b8:	80 93 bb 00 	sts	0x00BB, r24	; 0x8000bb <__TEXT_REGION_LENGTH__+0x7f80bb>
	TWCR = ((1<< TWINT) | (1<<TWEN));
 2bc:	84 e8       	ldi	r24, 0x84	; 132
 2be:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 <<TWINT)));	
 2c2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2c6:	88 23       	and	r24, r24
 2c8:	e4 f7       	brge	.-8      	; 0x2c2 <AddrEscravo+0xa>
}
 2ca:	08 95       	ret

Disassembly of section .text.EnableLCD:

0000018a <EnableLCD>:
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 18a:	8f e3       	ldi	r24, 0x3F	; 63
 18c:	9c e9       	ldi	r25, 0x9C	; 156
 18e:	01 97       	sbiw	r24, 0x01	; 1
 190:	f1 f7       	brne	.-4      	; 0x18e <EnableLCD+0x4>
 192:	00 c0       	rjmp	.+0      	; 0x194 <EnableLCD+0xa>
 194:	00 00       	nop

void EnableLCD(){
	_delay_ms(10);
	//Envia o dado
	TWDR |= (1<<TWD3) ; //enable HIGH
 196:	eb eb       	ldi	r30, 0xBB	; 187
 198:	f0 e0       	ldi	r31, 0x00	; 0
 19a:	80 81       	ld	r24, Z
 19c:	88 60       	ori	r24, 0x08	; 8
 19e:	80 83       	st	Z, r24
	TWCR = ((1<< TWINT) | (1<<TWEN));
 1a0:	84 e8       	ldi	r24, 0x84	; 132
 1a2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 <<TWINT)));
 1a6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1aa:	88 23       	and	r24, r24
 1ac:	e4 f7       	brge	.-8      	; 0x1a6 <EnableLCD+0x1c>
 1ae:	8f e3       	ldi	r24, 0x3F	; 63
 1b0:	9c e9       	ldi	r25, 0x9C	; 156
 1b2:	01 97       	sbiw	r24, 0x01	; 1
 1b4:	f1 f7       	brne	.-4      	; 0x1b2 <EnableLCD+0x28>
 1b6:	00 c0       	rjmp	.+0      	; 0x1b8 <EnableLCD+0x2e>
 1b8:	00 00       	nop
	_delay_ms(10);
	//Envia o dado
	TWDR &= ~(1<<TWD3) ; //enable low
 1ba:	eb eb       	ldi	r30, 0xBB	; 187
 1bc:	f0 e0       	ldi	r31, 0x00	; 0
 1be:	80 81       	ld	r24, Z
 1c0:	87 7f       	andi	r24, 0xF7	; 247
 1c2:	80 83       	st	Z, r24
	TWCR = ((1<< TWINT) | (1<<TWEN));
 1c4:	84 e8       	ldi	r24, 0x84	; 132
 1c6:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 <<TWINT)));
 1ca:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1ce:	88 23       	and	r24, r24
 1d0:	e4 f7       	brge	.-8      	; 0x1ca <EnableLCD+0x40>
 1d2:	8f e3       	ldi	r24, 0x3F	; 63
 1d4:	9c e9       	ldi	r25, 0x9C	; 156
 1d6:	01 97       	sbiw	r24, 0x01	; 1
 1d8:	f1 f7       	brne	.-4      	; 0x1d6 <EnableLCD+0x4c>
 1da:	00 c0       	rjmp	.+0      	; 0x1dc <EnableLCD+0x52>
 1dc:	00 00       	nop
 1de:	08 95       	ret

Disassembly of section .text.carregaMSG:

00000226 <carregaMSG>:
 226:	8f e3       	ldi	r24, 0x3F	; 63
 228:	9c e9       	ldi	r25, 0x9C	; 156
 22a:	01 97       	sbiw	r24, 0x01	; 1
 22c:	f1 f7       	brne	.-4      	; 0x22a <carregaMSG+0x4>
 22e:	00 c0       	rjmp	.+0      	; 0x230 <carregaMSG+0xa>
 230:	00 00       	nop
}

void carregaMSG(){
	_delay_ms(10);
	//Envia o dado
	TWDR |= (1<<TWD1) ; //RS HIGH
 232:	eb eb       	ldi	r30, 0xBB	; 187
 234:	f0 e0       	ldi	r31, 0x00	; 0
 236:	80 81       	ld	r24, Z
 238:	82 60       	ori	r24, 0x02	; 2
 23a:	80 83       	st	Z, r24
	TWCR = ((1<< TWINT) | (1<<TWEN));
 23c:	84 e8       	ldi	r24, 0x84	; 132
 23e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 <<TWINT)));
 242:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 246:	88 23       	and	r24, r24
 248:	e4 f7       	brge	.-8      	; 0x242 <carregaMSG+0x1c>
 24a:	8f e3       	ldi	r24, 0x3F	; 63
 24c:	9c e9       	ldi	r25, 0x9C	; 156
 24e:	01 97       	sbiw	r24, 0x01	; 1
 250:	f1 f7       	brne	.-4      	; 0x24e <carregaMSG+0x28>
 252:	00 c0       	rjmp	.+0      	; 0x254 <carregaMSG+0x2e>
 254:	00 00       	nop
	_delay_ms(10);

	EnableLCD();
 256:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
 25a:	08 95       	ret

Disassembly of section .text.Stop:

0000029e <Stop>:
}

void Stop(){
	//Envia uma condição de STOP
	TWCR = ((1<< TWINT) | (1<<TWEN) | (1<<TWSTO));
 29e:	84 e9       	ldi	r24, 0x94	; 148
 2a0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 2a4:	2f ef       	ldi	r18, 0xFF	; 255
 2a6:	81 ee       	ldi	r24, 0xE1	; 225
 2a8:	94 e0       	ldi	r25, 0x04	; 4
 2aa:	21 50       	subi	r18, 0x01	; 1
 2ac:	80 40       	sbci	r24, 0x00	; 0
 2ae:	90 40       	sbci	r25, 0x00	; 0
 2b0:	e1 f7       	brne	.-8      	; 0x2aa <Stop+0xc>
 2b2:	00 c0       	rjmp	.+0      	; 0x2b4 <Stop+0x16>
 2b4:	00 00       	nop
 2b6:	08 95       	ret

Disassembly of section .text.EscreveTraco:

000001e0 <EscreveTraco>:
	_delay_ms(100);
}

void EscreveTraco(){
	//Envia Caracter - " - " => (0010-1101)
	TWDR |= (1<<TWD5); // (0010-****)
 1e0:	eb eb       	ldi	r30, 0xBB	; 187
 1e2:	f0 e0       	ldi	r31, 0x00	; 0
 1e4:	80 81       	ld	r24, Z
 1e6:	80 62       	ori	r24, 0x20	; 32
 1e8:	80 83       	st	Z, r24
	TWDR &= ~(1<<TWD7)&~(1<<TWD6)&~(1<<TWD4);
 1ea:	80 81       	ld	r24, Z
 1ec:	8f 72       	andi	r24, 0x2F	; 47
 1ee:	80 83       	st	Z, r24
	TWCR = ((1<< TWINT) | (1<<TWEN));
 1f0:	84 e8       	ldi	r24, 0x84	; 132
 1f2:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 <<TWINT)));
 1f6:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 1fa:	88 23       	and	r24, r24
 1fc:	e4 f7       	brge	.-8      	; 0x1f6 <EscreveTraco+0x16>
	carregaMSG();
 1fe:	0e 94 13 01 	call	0x226	; 0x226 <carregaMSG>
	//Envia o dado
	TWDR |= (1<<TWD7)|(1<<TWD6)|(1<<TWD4); // (1101-****)
 202:	eb eb       	ldi	r30, 0xBB	; 187
 204:	f0 e0       	ldi	r31, 0x00	; 0
 206:	80 81       	ld	r24, Z
 208:	80 6d       	ori	r24, 0xD0	; 208
 20a:	80 83       	st	Z, r24
	TWDR &= ~(1<<TWD5);
 20c:	80 81       	ld	r24, Z
 20e:	8f 7d       	andi	r24, 0xDF	; 223
 210:	80 83       	st	Z, r24
	TWCR = ((1<< TWINT) | (1<<TWEN));
 212:	84 e8       	ldi	r24, 0x84	; 132
 214:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
	while (!(TWCR & (1 <<TWINT)));
 218:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 21c:	88 23       	and	r24, r24
 21e:	e4 f7       	brge	.-8      	; 0x218 <EscreveTraco+0x38>
	carregaMSG();	
 220:	0e 94 13 01 	call	0x226	; 0x226 <carregaMSG>
 224:	08 95       	ret

Disassembly of section .text.ConfigLCD:

00000080 <ConfigLCD>:
}

void ConfigLCD(){
	
Start();
  80:	0e 94 66 01 	call	0x2cc	; 0x2cc <Start>
//---------------------------------------------------
AddrEscravo(0x40);
  84:	80 e4       	ldi	r24, 0x40	; 64
  86:	90 e0       	ldi	r25, 0x00	; 0
  88:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <AddrEscravo>
//----------------------------------------------------
//-----------SetUp Display--------Modo 4 bits--------(0010-1000)-------------------------
//Envia o dado
TWDR |= (1<<TWD5) ; //modo 4 bits do display (0010-0000)
  8c:	eb eb       	ldi	r30, 0xBB	; 187
  8e:	f0 e0       	ldi	r31, 0x00	; 0
  90:	80 81       	ld	r24, Z
  92:	80 62       	ori	r24, 0x20	; 32
  94:	80 83       	st	Z, r24
TWDR &= ~(1<<TWD7)&~(1<<TWD6)&~(1<<TWD4);
  96:	80 81       	ld	r24, Z
  98:	8f 72       	andi	r24, 0x2F	; 47
  9a:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
  9c:	84 e8       	ldi	r24, 0x84	; 132
  9e:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
  a2:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  a6:	88 23       	and	r24, r24
  a8:	e4 f7       	brge	.-8      	; 0xa2 <ConfigLCD+0x22>
EnableLCD();
  aa:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
//Envia o dado
TWDR |= (1<<TWD4) ; //Configura segunda linha (****-0001)
  ae:	eb eb       	ldi	r30, 0xBB	; 187
  b0:	f0 e0       	ldi	r31, 0x00	; 0
  b2:	80 81       	ld	r24, Z
  b4:	80 61       	ori	r24, 0x10	; 16
  b6:	80 83       	st	Z, r24
TWDR &= ~(1<<TWD7)&~(1<<TWD6)&~(1<<TWD5);
  b8:	80 81       	ld	r24, Z
  ba:	8f 71       	andi	r24, 0x1F	; 31
  bc:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
  be:	84 e8       	ldi	r24, 0x84	; 132
  c0:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
  c4:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  c8:	88 23       	and	r24, r24
  ca:	e4 f7       	brge	.-8      	; 0xc4 <ConfigLCD+0x44>
EnableLCD();
  cc:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>

//-----------------Limpas Display => (0000-0001)-------------------
//Envia o dado
TWDR &= ~(1<<TWD7)&~(1<<TWD6)&~(1<<TWD5)&~(1<<TWD4);	//modo 4 bits do display (0000-0000)
  d0:	eb eb       	ldi	r30, 0xBB	; 187
  d2:	f0 e0       	ldi	r31, 0x00	; 0
  d4:	80 81       	ld	r24, Z
  d6:	8f 70       	andi	r24, 0x0F	; 15
  d8:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
  da:	84 e8       	ldi	r24, 0x84	; 132
  dc:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
  e0:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
  e4:	88 23       	and	r24, r24
  e6:	e4 f7       	brge	.-8      	; 0xe0 <ConfigLCD+0x60>
EnableLCD();
  e8:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
//Envia o dado
TWDR |= (1<<TWD4) ; //Configura segunda linha (0001-0000)
  ec:	eb eb       	ldi	r30, 0xBB	; 187
  ee:	f0 e0       	ldi	r31, 0x00	; 0
  f0:	80 81       	ld	r24, Z
  f2:	80 61       	ori	r24, 0x10	; 16
  f4:	80 83       	st	Z, r24
TWDR &= ~(1<<TWD7)&~(1<<TWD6)&(1<<TWD5);
  f6:	80 81       	ld	r24, Z
  f8:	80 72       	andi	r24, 0x20	; 32
  fa:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
  fc:	84 e8       	ldi	r24, 0x84	; 132
  fe:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
 102:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 106:	88 23       	and	r24, r24
 108:	e4 f7       	brge	.-8      	; 0x102 <ConfigLCD+0x82>
EnableLCD();
 10a:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
//----------------------------------------------------------------------

//-----------Liga Display / Liga Cursor / Liga Blinck do cursor => (0000-1111)------------
TWDR &= ~(1<<TWD7)&~(1<<TWD6)&~(1<<TWD5)&~(1<<TWD4);	// (0000-0000)
 10e:	eb eb       	ldi	r30, 0xBB	; 187
 110:	f0 e0       	ldi	r31, 0x00	; 0
 112:	80 81       	ld	r24, Z
 114:	8f 70       	andi	r24, 0x0F	; 15
 116:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
 118:	84 e8       	ldi	r24, 0x84	; 132
 11a:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
 11e:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 122:	88 23       	and	r24, r24
 124:	e4 f7       	brge	.-8      	; 0x11e <ConfigLCD+0x9e>
EnableLCD();
 126:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
//Envia o dado
TWDR |= (1<<TWD7)|(1<<TWD6)|(1<<TWD5)|(1<<TWD4) ; // (1111-****)
 12a:	eb eb       	ldi	r30, 0xBB	; 187
 12c:	f0 e0       	ldi	r31, 0x00	; 0
 12e:	80 81       	ld	r24, Z
 130:	80 6f       	ori	r24, 0xF0	; 240
 132:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
 134:	84 e8       	ldi	r24, 0x84	; 132
 136:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
 13a:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 13e:	88 23       	and	r24, r24
 140:	e4 f7       	brge	.-8      	; 0x13a <ConfigLCD+0xba>
EnableLCD();
 142:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
//----------------------------------------------------------------------

//----------------Entry Mode Set => (0000-0110)------------------------
TWDR &= ~(1<<TWD7)&~(1<<TWD6)&~(1<<TWD5)&~(1<<TWD4);	// (0000-0000)
 146:	eb eb       	ldi	r30, 0xBB	; 187
 148:	f0 e0       	ldi	r31, 0x00	; 0
 14a:	80 81       	ld	r24, Z
 14c:	8f 70       	andi	r24, 0x0F	; 15
 14e:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
 150:	84 e8       	ldi	r24, 0x84	; 132
 152:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
 156:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 15a:	88 23       	and	r24, r24
 15c:	e4 f7       	brge	.-8      	; 0x156 <ConfigLCD+0xd6>
EnableLCD();
 15e:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
//Envia o dado
TWDR |= (1<<TWD6)|(1<<TWD5); // (0110-****)
 162:	eb eb       	ldi	r30, 0xBB	; 187
 164:	f0 e0       	ldi	r31, 0x00	; 0
 166:	80 81       	ld	r24, Z
 168:	80 66       	ori	r24, 0x60	; 96
 16a:	80 83       	st	Z, r24
TWDR &= ~(1<<TWD7)&~(1<<TWD4);
 16c:	80 81       	ld	r24, Z
 16e:	8f 76       	andi	r24, 0x6F	; 111
 170:	80 83       	st	Z, r24
TWCR = ((1<< TWINT) | (1<<TWEN));
 172:	84 e8       	ldi	r24, 0x84	; 132
 174:	80 93 bc 00 	sts	0x00BC, r24	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
while (!(TWCR & (1 <<TWINT)));
 178:	80 91 bc 00 	lds	r24, 0x00BC	; 0x8000bc <__TEXT_REGION_LENGTH__+0x7f80bc>
 17c:	88 23       	and	r24, r24
 17e:	e4 f7       	brge	.-8      	; 0x178 <ConfigLCD+0xf8>
EnableLCD();
 180:	0e 94 c5 00 	call	0x18a	; 0x18a <EnableLCD>
//----------------------------------------------------

Stop();	
 184:	0e 94 4f 01 	call	0x29e	; 0x29e <Stop>
 188:	08 95       	ret

Disassembly of section .text.main:

0000025c <main>:
void ConfigLCD();
void EscreveTraco();

int main(void) {
	//Cnfiguração do I2C
	ConfigTWI();
 25c:	0e 94 41 01 	call	0x282	; 0x282 <ConfigTWI>
	//Configuração do LCD16x2
	ConfigLCD();
 260:	0e 94 40 00 	call	0x80	; 0x80 <__data_load_end>
	
	//----------------
	Start(); 
 264:	0e 94 66 01 	call	0x2cc	; 0x2cc <Start>
	AddrEscravo(0x40); //Endereço do escravo
 268:	80 e4       	ldi	r24, 0x40	; 64
 26a:	90 e0       	ldi	r25, 0x00	; 0
 26c:	0e 94 5c 01 	call	0x2b8	; 0x2b8 <AddrEscravo>
	
	EscreveTraco();
 270:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <EscreveTraco>
	EscreveTraco();
 274:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <EscreveTraco>
	EscreveTraco();
 278:	0e 94 f0 00 	call	0x1e0	; 0x1e0 <EscreveTraco>
	
	Stop();
 27c:	0e 94 4f 01 	call	0x29e	; 0x29e <Stop>
 280:	ff cf       	rjmp	.-2      	; 0x280 <main+0x24>
